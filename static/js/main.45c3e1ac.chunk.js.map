{"version":3,"sources":["styles.js","App.jsx","index.js"],"names":["useStyles","makeStyles","theme","container","backgroundColor","palette","background","paper","padding","spacing","icon","marginRight","button","marginTop","boxRight","justifyContent","display","cardGrid","card","height","flexDirection","cardMedia","paddingTop","cardContent","flexGrow","footer","cards","App","classes","useState","CssBaseline","AppBar","position","Toolbar","Grid","justify","item","Typography","variant","Button","color","onClick","window","addEventListener","a","ethereum","Web3","enable","web3","console","log","provider","providers","HttpProvider","className","Container","maxWidth","align","gutterBottom","paragraph","startIcon","Link","target","rel","href","map","key","xs","sm","md","Card","CardMedia","image","title","CardContent","CardActions","size","IconButton","aria-label","open","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45c3e1ac.chunk.js","sourcesContent":["import { CardMedia } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  icon: {\r\n    marginRight: \"20px\",\r\n  },\r\n  button: {\r\n    marginTop: \"40px\",\r\n  },\r\n  boxRight: {\r\n    justifyContent: \"flex-end\",\r\n    display: \"flex\",\r\n  },\r\n  cardGrid: {\r\n    padding: \"20px 0\",\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\", //16/9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: \"50px 0\",\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React, { useState } from \"react\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport {\r\n  Typography,\r\n  AppBar,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  CssBaseline,\r\n  Grid,\r\n  Toolbar,\r\n  Container,\r\n  Box,\r\n  Link,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport Button from \"@mui/material/Button\";\r\nimport useStyles from \"./styles\";\r\nimport Web3 from \"web3\";\r\nimport GitHubIcon from \"@mui/icons-material/GitHub\";\r\nimport DocumentScannerIcon from \"@mui/icons-material/DocumentScanner\";\r\nimport LinkedInIcon from \"@mui/icons-material/LinkedIn\";\r\n\r\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  const [accounts, setAccounts] = useState(null);\r\n  const [web3, setWeb3] = useState(null);\r\n\r\n  const componentDidMount = () => {\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        web3 = new Web3(window.ethereum);\r\n\r\n        // Request account access if needed\r\n        await window.ethereum.enable();\r\n        // Accounts now exposed\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n      }\r\n    });\r\n  };\r\n  const componentDidMounta = async () => {\r\n    console.log(\"omg\");\r\n    // try {\r\n    // Get network provider and web3 instance.\r\n    const web3 = await getWeb3();\r\n\r\n    // Use web3 to get the user's accounts.\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    setWeb3(web3);\r\n    setAccounts(accounts);\r\n    console.log(\"in connecting\");\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId();\r\n    // const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n    // const instance = new web3.eth.Contract(\r\n    //   SimpleStorageContract.abi,\r\n    //   deployedNetwork && deployedNetwork.address\r\n    // );\r\n\r\n    // Set web3, accounts, and contract to the state, and then proceed with an\r\n    // example of interacting with the contract's methods.\r\n    //this.setState({ web3, accounts, contract: instance }, this.runExample);\r\n    // } catch (error) {\r\n    // Catch any errors for any of the above operations.\r\n    // alert(\r\n    // `Failed to load web3, accounts, or contract. Check console for details.`\r\n    // );\r\n    // console.error(error);\r\n    // }\r\n  };\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar display=\"flex\">\r\n          <Grid justify=\"space-between\" container spacing={24}>\r\n            <Grid item>\r\n              <Typography variant=\"h6\">NFT Collection</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={componentDidMount}\r\n              >\r\n                Connect Metamask\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.container}>\r\n          <Container maxWidth=\"sm\">\r\n            <Typography\r\n              variant=\"h2\"\r\n              align=\"center\"\r\n              color=\"textPrimary\"\r\n              gutterBottom\r\n            >\r\n              NFT Collection\r\n            </Typography>\r\n            <Typography\r\n              variant=\"h5\"\r\n              align=\"center\"\r\n              color=\"textSecondary\"\r\n              paragraph\r\n            >\r\n              This is an NFT collection\r\n            </Typography>\r\n            <div className={classes.button}>\r\n              <Grid container spacing={2} justifyContent=\"center\">\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<GitHubIcon />}\r\n                  >\r\n                    <Link\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      href=\"https://github.com/mihaidicianu/nfts\"\r\n                    >\r\n                      Github repository\r\n                    </Link>\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"outlined \"\r\n                    color=\"primary\"\r\n                    startIcon={<DocumentScannerIcon />}\r\n                  >\r\n                    <Link\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      href=\"https://rinkeby.etherscan.io/\"\r\n                    >\r\n                      Smart contract\r\n                    </Link>\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          <Grid container spacing={4}>\r\n            {cards.map((card) => (\r\n              <Grid item key={card} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image=\"https://source.unsplash.com/random\"\r\n                    title=\"Image title\"\r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"h5\">\r\n                      Heading\r\n                    </Typography>\r\n                    <Typography>\r\n                      This is a media card. You can use this to describe the\r\n                      content\r\n                    </Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Button size=\"small\" color=\"primary\">\r\n                      View\r\n                    </Button>\r\n                    <Button size=\"small\" color=\"primary\">\r\n                      Edit\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n            <Grid item>\r\n              <Card className={classes.card}>\r\n                <CardMedia\r\n                  className={classes.cardMedia}\r\n                  image=\"https://source.unsplash.com/random\"\r\n                  title=\"Image title\"\r\n                />\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography gutterBottom variant=\"h5\">\r\n                    Heading\r\n                  </Typography>\r\n                  <Typography>\r\n                    This is a media card. You can use this to describe the\r\n                    content\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                  <Button size=\"small\" color=\"primary\">\r\n                    View\r\n                  </Button>\r\n                  <Button size=\"small\" color=\"primary\">\r\n                    Edit\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n      <footer className={classes.footer} display=\"flex\">\r\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\r\n          Footer\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\">\r\n          Footer purpose\r\n        </Typography>\r\n        <Grid spacing={2} justifyContent=\"center\">\r\n          <Grid item>\r\n            <IconButton\r\n              aria-label=\"Linkedin.com\"\r\n              onClick={() =>\r\n                window.open(\r\n                  \"https://www.linkedin.com/in/mihai-dicianu-9a6308188/\"\r\n                )\r\n              }\r\n            >\r\n              <LinkedInIcon fontSize=\"large\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}